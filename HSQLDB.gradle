apply plugin: 'java'

task startDatabase() {
    group = 'database'
    outputs.upToDateWhen {
        return !available()
    }
    doLast {
        def dbUser = project.properties['dbUser'] ?: gradle.dbUser
        def dbPassword = project.properties['dbPassword'] ?: gradle.dbPassword
        def dbFile = project.properties['dbFile'] ?: gradle.dbFile
        def dbName = project.properties['dbName'] ?: gradle.dbName

        def className = "org.hsqldb.server.Server"
        def filePath = "file:${projectDir}/${dbFile};user=${dbUser};password=${dbPassword}"

        def process = buildProcess(className, filePath, dbName)
        wait(process)
    }
}

def buildProcess(className, filePath, dbName) {
    def javaHome = System.getProperty("java.home")
    def javaBin = javaHome + File.separator + "bin" + File.separator + "java"
    def classpath = project.buildscript.configurations.classpath.asPath

    def builder = new ProcessBuilder(javaBin, "-cp", classpath, className, "-database.0", filePath, "-dbname.0", dbName)
    builder.redirectErrorStream(true)
    builder.directory(projectDir)
    def process = builder.start()
    process
}

def wait(Process process) {
    def ready = "From command line, use [Ctrl]+[C] to abort abruptly"
    def reader = new BufferedReader(new InputStreamReader(process.getInputStream()))

    def line
    while ((line = reader.readLine()) != null) {
        logger.quiet line
        if (line.contains(ready)) {
            break
        }
    }
}


import groovy.sql.Sql

task stopDatabase() {
    group = 'database'
    outputs.upToDateWhen {
        return available()
    }
    doLast {
        def dbUser = project.properties['dbUser'] ?: gradle.dbUser
        def dbPassword = project.properties['dbPassword'] ?: gradle.dbPassword
        def dbUrl = project.properties['dbUrl'] ?: gradle.dbUrl
        def dbDrive = project.properties['dbDrive'] ?: gradle.dbDrive

        // for loading hsqldb.jdbc.JDBCDriver
        ClassLoader loader = Sql.class.classLoader
        project.buildscript.configurations.classpath.each { File file ->
            loader.addURL(file.toURI().toURL())
        }
        //noinspection GroovyAssignabilityCheck
        Sql sql = Sql.newInstance(dbUrl, dbUser, dbPassword, dbDrive) as Sql
        sql.execute('SHUTDOWN;')
        sql.close()
    }
}


boolean available() {
    try {
        int dbPort = project.properties['dbPort'] ?: gradle.dbPort as int
        String dbHost = project.properties['dbHost'] ?: gradle.dbHost
        Socket ignored = new Socket(dbHost, dbPort)
        ignored.close()
        return false
    }
    catch (IOException ignored) {
        return true
    }
}

task createTables() {
    group = 'database'
    outputs.upToDateWhen {
        return available()
    }
    doLast {
        String createSQL = project.properties['createSQL'] ?: gradle.createSQL
        runSQL(createSQL)
    }

}

task fillTables() {
    group = 'database'
    outputs.upToDateWhen {
        return available()
    }
    doLast {
        String fillSQL = project.properties['fillSQL'] ?: gradle.fillSQL
        runSQL(fillSQL)
    }
}

task dropTables() {
    group = 'database'
    outputs.upToDateWhen {
        return available()
    }
    doLast {
        String dropSQL = project.properties['dropSQL'] ?: gradle.dropSQL
        runSQL(dropSQL)
    }
}

void runSQL(String fileName) {
    def dbUser = project.properties['dbUser'] ?: gradle.dbUser
    def dbPassword = project.properties['dbPassword'] ?: gradle.dbPassword
    def dbUrl = project.properties['dbUrl'] ?: gradle.dbUrl
    def dbDrive = project.properties['dbDrive'] ?: gradle.dbDrive

    def filePath = "${projectDir}/scripts_sql/" + fileName
    String SQLScript = new File(filePath).text

    // for loading hsqldb.jdbc.JDBCDriver
    ClassLoader loader = Sql.class.classLoader
    project.buildscript.configurations.classpath.each { File file ->
        loader.addURL(file.toURI().toURL())
    }

    Sql sql = Sql.newInstance(dbUrl, dbUser, dbPassword, dbDrive) as Sql
    sql.execute(SQLScript)
    sql.close()
}